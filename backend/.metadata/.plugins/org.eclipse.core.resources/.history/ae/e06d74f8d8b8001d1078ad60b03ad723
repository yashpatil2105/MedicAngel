package com.app.services;


import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.customexception.ResourceNotFoundException;
import com.app.pojos.BenificaryOther;
import com.app.pojos.BenificaryRelative;
import com.app.pojos.BenificaryUser;
import com.app.pojos.Campaign;
import com.app.pojos.User;
import com.app.repository.BenificaryOtherRepository;
import com.app.repository.BenificaryRelativeRepository;
import com.app.repository.BenificaryUserRepository;
import com.app.repository.CampaignRepository;
import com.app.repository.UserRepository;
@Service
@Transactional
public class UserServiceImpl implements UserService {
	
    @Autowired
    private UserRepository userRepo;
    
    @Autowired
    private BenificaryUserRepository bUserRepo;
    
    @Autowired
    private BenificaryRelativeRepository bRelativeRepo;
    
    @Autowired
    private BenificaryOtherRepository bOtherRepo;
    
    @Autowired
    private CampaignRepository campaignRepo;
    
    @Autowired
    private PasswordEncoder enc;
    

    
    

	
	@Override
	public User addNewUser(User user) {
		user.setPassword(enc.encode(user.getPassword()));
		return userRepo.save(user);
	}
	
	@Override
	public User getUser(String email) {
		 User user = userRepo.findByEmail(email).orElseThrow(() -> new UsernameNotFoundException("Invalid Email ID"));
		 return user;
	}
	
	@Override
	public Campaign addNewcampaign(Authentication auth ,Campaign campaign) {
		User user = userRepo.findByEmail(((String)auth.getPrincipal())).orElseThrow(() -> new UsernameNotFoundException("Invalid Email ID"));
		campaign.setOb(user);
//		userRepo.save(user);
		return campaignRepo.save(campaign);
	}
	
	@Override
	public Set<Campaign> getCampaign(String email) {
		 User user = userRepo.findByEmail(email).orElseThrow(() -> new UsernameNotFoundException("Invalid Email ID"));
		return user.getCampaign();
	}
	
	
	
	
	
	@Override
	public BenificaryUser addNewUserBenificary(BenificaryUser user) {
		
		return bUserRepo.save(user);
	}
	@Override
	public BenificaryRelative addNewRelativeBenificary(BenificaryRelative relative) {
//		Campaign campaign = campaignRepo.findById(key).orElseThrow(() -> new UsernameNotFoundException("Invalid Email ID"));
//		relative.setCampaign(campaign);
		return bRelativeRepo.save(relative);
	}
	@Override
	public BenificaryOther addNewOtherBenificary(BenificaryOther other) {
		
		return bOtherRepo.save(other);
	}

	@Override
	public User updateUser(User detachedUser) throws ResourceNotFoundException {
		if (userRepo.existsById(detachedUser.getId())) {
			return userRepo.updateProfile(detachedUser.getFirstName(),detachedUser.getLastName(),detachedUser.getId());
		}
		throw new ResourceNotFoundException("Invalid Emp Id : Updation Failed!!!!!!!!");
		
	}



	


}
